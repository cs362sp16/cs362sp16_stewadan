        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      289:    8:int compare(const void* a, const void* b) {
      289:    9:  if (*(int*)a > *(int*)b)
        5:   10:    return 1;
      284:   11:  if (*(int*)a < *(int*)b)
       74:   12:    return -1;
      210:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:  int i;
        -:   39:  int j;
        -:   40:  int it;			
        -:   41:  //set up random number generator
        9:   42:  SelectStream(1);
        9:   43:  PutSeed((long)randomSeed);
        -:   44:  
        -:   45:  //check number of players
        9:   46:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   47:    {
    #####:   48:      return -1;
        -:   49:    }
        -:   50:
        -:   51:  //set number of players
        9:   52:  state->numPlayers = numPlayers;
        -:   53:
        -:   54:  //check selected kingdom cards are different
       99:   55:  for (i = 0; i < 10; i++)
        -:   56:    {
      990:   57:      for (j = 0; j < 10; j++)
        -:   58:        {
      900:   59:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   60:	    {
    #####:   61:	      return -1;
        -:   62:	    }
        -:   63:        }
        -:   64:    }
        -:   65:
        -:   66:
        -:   67:  //initialize supply
        -:   68:  ///////////////////////////////
        -:   69:
        -:   70:  //set number of Curse cards
        9:   71:  if (numPlayers == 2)
        -:   72:    {
        9:   73:      state->supplyCount[curse] = 10;
        -:   74:    }
    #####:   75:  else if (numPlayers == 3)
        -:   76:    {
    #####:   77:      state->supplyCount[curse] = 20;
        -:   78:    }
        -:   79:  else
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 30;
        -:   82:    }
        -:   83:
        -:   84:  //set number of Victory cards
        9:   85:  if (numPlayers == 2)
        -:   86:    {
        9:   87:      state->supplyCount[estate] = 8;
        9:   88:      state->supplyCount[duchy] = 8;
        9:   89:      state->supplyCount[province] = 8;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 12;
    #####:   94:      state->supplyCount[duchy] = 12;
    #####:   95:      state->supplyCount[province] = 12;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Treasure cards
        9:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  100:  state->supplyCount[silver] = 40;
        9:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
      189:  104:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  105:    {
     1485:  106:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:	{
     1395:  108:	  if (kingdomCards[j] == i)
        -:  109:	    {
        -:  110:	      //check if card is a 'Victory' Kingdom card
       90:  111:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:		{
       18:  113:		  if (numPlayers == 2){ 
        9:  114:		    state->supplyCount[i] = 8; 
        -:  115:		  }
    #####:  116:		  else{ state->supplyCount[i] = 12; }
        -:  117:		}
        -:  118:	      else
        -:  119:		{
       81:  120:		  state->supplyCount[i] = 10;
        -:  121:		}
       90:  122:	      break;
        -:  123:	    }
        -:  124:	  else    //card is not in the set choosen for the game
        -:  125:	    {
     1305:  126:	      state->supplyCount[i] = -1;
        -:  127:	    }
        -:  128:	}
        -:  129:
        -:  130:    }
        -:  131:
        -:  132:  ////////////////////////
        -:  133:  //supply intilization complete
        -:  134:
        -:  135:  //set player decks
       27:  136:  for (i = 0; i < numPlayers; i++)
        -:  137:    {
       18:  138:      state->deckCount[i] = 0;
       72:  139:      for (j = 0; j < 3; j++)
        -:  140:	{
       54:  141:	  state->deck[i][j] = estate;
       54:  142:	  state->deckCount[i]++;
        -:  143:	}
      144:  144:      for (j = 3; j < 10; j++)
        -:  145:	{
      126:  146:	  state->deck[i][j] = copper;
      126:  147:	  state->deckCount[i]++;		
        -:  148:	}
        -:  149:    }
        -:  150:
        -:  151:  //shuffle player decks
       27:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:    {
       18:  154:      if ( shuffle(i, state) < 0 )
        -:  155:	{
    #####:  156:	  return -1;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //draw player hands
       27:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {  
        -:  163:      //initialize hand size to zero
       18:  164:      state->handCount[i] = 0;
       18:  165:      state->discardCount[i] = 0;
        -:  166:      //draw 5 cards
        -:  167:      // for (j = 0; j < 5; j++)
        -:  168:      //	{
        -:  169:      //	  drawCard(i, state);
        -:  170:      //	}
        -:  171:    }
        -:  172:  
        -:  173:  //set embargo tokens to 0 for all supply piles
      252:  174:  for (i = 0; i <= treasure_map; i++)
        -:  175:    {
      243:  176:      state->embargoTokens[i] = 0;
        -:  177:    }
        -:  178:
        -:  179:  //initialize first player's turn
        9:  180:  state->outpostPlayed = 0;
        9:  181:  state->phase = 0;
        9:  182:  state->numActions = 1;
        9:  183:  state->numBuys = 1;
        9:  184:  state->playedCardCount = 0;
        9:  185:  state->whoseTurn = 0;
        9:  186:  state->handCount[state->whoseTurn] = 0;
        -:  187:  //int it; move to top
        -:  188:
        -:  189:  //Moved draw cards to here, only drawing at the start of a turn
       54:  190:  for (it = 0; it < 5; it++){
       45:  191:    drawCard(state->whoseTurn, state);
        -:  192:  }
        -:  193:
        9:  194:  updateCoins(state->whoseTurn, state, 0);
        -:  195:
        9:  196:  return 0;
        -:  197:}
        -:  198:
       19:  199:int shuffle(int player, struct gameState *state) {
        -:  200: 
        -:  201:
        -:  202:  int newDeck[MAX_DECK];
       19:  203:  int newDeckPos = 0;
        -:  204:  int card;
        -:  205:  int i;
        -:  206:
       19:  207:  if (state->deckCount[player] < 1)
    #####:  208:    return -1;
       19:  209:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  210:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  211:
      228:  212:  while (state->deckCount[player] > 0) {
      190:  213:    card = floor(Random() * state->deckCount[player]);
      190:  214:    newDeck[newDeckPos] = state->deck[player][card];
      190:  215:    newDeckPos++;
      627:  216:    for (i = card; i < state->deckCount[player]-1; i++) {
      437:  217:      state->deck[player][i] = state->deck[player][i+1];
        -:  218:    }
      190:  219:    state->deckCount[player]--;
        -:  220:  }
      209:  221:  for (i = 0; i < newDeckPos; i++) {
      190:  222:    state->deck[player][i] = newDeck[i];
      190:  223:    state->deckCount[player]++;
        -:  224:  }
        -:  225:
       19:  226:  return 0;
        -:  227:}
        -:  228:
    #####:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  230:{	
        -:  231:  int card;
    #####:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
    #####:  235:  if (state->phase != 0)
        -:  236:    {
    #####:  237:      return -1;
        -:  238:    }
        -:  239:	
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:	
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:	
    #####:  267:  return 0;
        -:  268:}
        -:  269:
        1:  270:int buyCard(int supplyPos, struct gameState *state) {
        -:  271:  int who;
        -:  272:  if (DEBUG){
        -:  273:    printf("Entering buyCard...\n");
        -:  274:  }
        -:  275:
        -:  276:  // I don't know what to do about the phase thing.
        -:  277:
        1:  278:  who = state->whoseTurn;
        -:  279:
        1:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:      printf("You do not have any buys left\n");
    #####:  283:    return -1;
        1:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:      printf("There are not any of that type of card left\n");
    #####:  287:    return -1;
        1:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG) 
        -:  290:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:  
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:    
    #####:  306:  return 0;
        -:  307:}
        -:  308:
       23:  309:int numHandCards(struct gameState *state) {
       23:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
    #####:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
        1:  318:int supplyCount(int card, struct gameState *state) {
        1:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
       54:  322:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  323:  int i;
       54:  324:  int count = 0;
        -:  325:
      297:  326:  for (i = 0; i < state->deckCount[player]; i++)
        -:  327:    {
      243:  328:      if (state->deck[player][i] == card) count++;
        -:  329:    }
        -:  330:
      243:  331:  for (i = 0; i < state->handCount[player]; i++)
        -:  332:    {
      189:  333:      if (state->hand[player][i] == card) count++;
        -:  334:    }
        -:  335:
       54:  336:  for (i = 0; i < state->discardCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->discard[player][i] == card) count++;
        -:  339:    }
        -:  340:
       54:  341:  return count;
        -:  342:}
        -:  343:
       40:  344:int whoseTurn(struct gameState *state) {
       40:  345:  return state->whoseTurn;
        -:  346:}
        -:  347:
        6:  348:int endTurn(struct gameState *state) {
        -:  349:  int k;
        -:  350:  int i;
        6:  351:  int currentPlayer = whoseTurn(state);
        -:  352:  
        -:  353:  //Discard hand
       38:  354:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       32:  355:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       32:  356:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  357:  }
        6:  358:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  359:    
        -:  360:  //Code for determining the player
        6:  361:  if (currentPlayer < (state->numPlayers - 1)){ 
        4:  362:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  363:  }
        -:  364:  else{
        2:  365:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  366:  }
        -:  367:
        6:  368:  state->outpostPlayed = 0;
        6:  369:  state->phase = 0;
        6:  370:  state->numActions = 1;
        6:  371:  state->coins = 0;
        6:  372:  state->numBuys = 1;
        6:  373:  state->playedCardCount = 0;
        6:  374:  state->handCount[state->whoseTurn] = 0;
        -:  375:
        -:  376:  //int k; move to top
        -:  377:  //Next player draws hand
       36:  378:  for (k = 0; k < 5; k++){
       30:  379:    drawCard(state->whoseTurn, state);//Draw a card
        -:  380:  }
        -:  381:
        -:  382:  //Update money
        6:  383:  updateCoins(state->whoseTurn, state , 0);
        -:  384:
        6:  385:  return 0;
        -:  386:}
        -:  387:
    #####:  388:int isGameOver(struct gameState *state) {
        -:  389:  int i;
        -:  390:  int j;
        -:  391:	
        -:  392:  //if stack of Province cards is empty, the game ends
    #####:  393:  if (state->supplyCount[province] == 0)
        -:  394:    {
    #####:  395:      return 1;
        -:  396:    }
        -:  397:
        -:  398:  //if three supply pile are at 0, the game ends
    #####:  399:  j = 0;
    #####:  400:  for (i = 0; i < 25; i++)
        -:  401:    {
    #####:  402:      if (state->supplyCount[i] == 0)
        -:  403:	{
    #####:  404:	  j++;
        -:  405:	}
        -:  406:    }
    #####:  407:  if ( j >= 3)
        -:  408:    {
    #####:  409:      return 1;
        -:  410:    }
        -:  411:
    #####:  412:  return 0;
        -:  413:}
        -:  414:
    #####:  415:int scoreFor (int player, struct gameState *state) {
        -:  416:
        -:  417:  int i;
    #####:  418:  int score = 0;
        -:  419:  //score from hand
    #####:  420:  for (i = 0; i < state->handCount[player]; i++)
        -:  421:    {
    #####:  422:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  423:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  424:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  425:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  426:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  428:    }
        -:  429:
        -:  430:  //score from discard
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from deck
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
    #####:  452:  return score;
        -:  453:}
        -:  454:
    #####:  455:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  456:  int i;	
        -:  457:  int j;
        -:  458:  int highScore;
        -:  459:  int currentPlayer;
        -:  460:
        -:  461:  //get score for each player
    #####:  462:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  463:    {
        -:  464:      //set unused player scores to -9999
    #####:  465:      if (i >= state->numPlayers)
        -:  466:	{
    #####:  467:	  players[i] = -9999;
        -:  468:	}
        -:  469:      else
        -:  470:	{
    #####:  471:	  players[i] = scoreFor (i, state);
        -:  472:	}
        -:  473:    }
        -:  474:
        -:  475:  //find highest score
    #####:  476:  j = 0;
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
    #####:  479:      if (players[i] > players[j])
        -:  480:	{
    #####:  481:	  j = i;
        -:  482:	}
        -:  483:    }
    #####:  484:  highScore = players[j];
        -:  485:
        -:  486:  //add 1 to players who had less turns
    #####:  487:  currentPlayer = whoseTurn(state);
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if ( players[i] == highScore && i > currentPlayer )
        -:  491:	{
    #####:  492:	  players[i]++;
        -:  493:	}
        -:  494:    }
        -:  495:
        -:  496:  //find new highest score
    #####:  497:  j = 0;
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] > players[j] )
        -:  501:	{
    #####:  502:	  j = i;
        -:  503:	}
        -:  504:    }
    #####:  505:  highScore = players[j];
        -:  506:
        -:  507:  //set winners in array to 1 and rest to 0
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] == highScore )
        -:  511:	{
    #####:  512:	  players[i] = 1;
        -:  513:	}
        -:  514:      else
        -:  515:	{
    #####:  516:	  players[i] = 0;
        -:  517:	}
        -:  518:    }
        -:  519:
    #####:  520:  return 0;
        -:  521:}
        -:  522:
       92:  523:int drawCard(int player, struct gameState *state)
        -:  524:{	
        -:  525:  int count;
        -:  526:  int deckCounter;
       92:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       11:  532:    for (i = 0; i < state->discardCount[player];i++){
       10:  533:      state->deck[player][i] = state->discard[player][i];
       10:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
        1:  537:    state->deckCount[player] = state->discardCount[player];
        1:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        1:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        1:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        1:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        1:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        1:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
        1:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  562:    state->deckCount[player]--;
        1:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       91:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       91:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       91:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       91:  575:    state->deckCount[player]--;
       91:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       92:  579:  return 0;
        -:  580:}
        -:  581:
        3:  582:int getCost(int cardNumber)
        -:  583:{
        3:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
        3:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        1:  645:int card_smithy(struct gameState *state, int currentPlayer, int handPos) {
        -:  646:   //+3 Cards
        -:  647:   int i;
        4:  648:   for (i = 0; i < 3; i++) {
        3:  649:      drawCard(currentPlayer, state);
        -:  650:   }
        -:  651:   //discard cards from hand
        1:  652:   discardCard(handPos, currentPlayer, state, 0);
        1:  653:   return 0;
        -:  654:}
        -:  655:
        1:  656:int card_village(struct gameState *state, int currentPlayer, int handPos) {		
        -:  657:   //+1 Card
        1:  658:   drawCard(currentPlayer, state);			
        -:  659:   //+2 Actions
        1:  660:   state->numActions = state->numActions + 2;			
        -:  661:   //discard played card from hand
        1:  662:   discardCard(handPos, currentPlayer, state, 0);
        1:  663:   return 0;
        -:  664:}
        -:  665:
    #####:  666:int card_greatHall(struct gameState *state, int currentPlayer, int handPos) {		
        -:  667:   //+1 Card
    #####:  668:   drawCard(currentPlayer, state);			
        -:  669:   //+1 Actions
    #####:  670:   state->numActions++;			
        -:  671:   //discard card from hand
    #####:  672:   discardCard(handPos, currentPlayer, state, 0);
    #####:  673:   return 0;
        -:  674:}
        -:  675:
    #####:  676:int card_outpost(struct gameState *state, int currentPlayer, int handPos) {
        -:  677:   //set outpost flag
    #####:  678:   state->outpostPlayed++;			
        -:  679:   //discard card
    #####:  680:   discardCard(handPos, currentPlayer, state, 0);
    #####:  681:   return 0;
        -:  682:}
        -:  683:
    #####:  684:int card_salvager(struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  685:   //+1 buy
    #####:  686:   state->numBuys++;
    #####:  687:   if (choice1) {
        -:  688:      //gain coins equal to trashed card
    #####:  689:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  690:      //trash card
    #####:  691:      discardCard(choice1, currentPlayer, state, 1);	
        -:  692:   }
        -:  693:   //discard card
    #####:  694:   discardCard(handPos, currentPlayer, state, 0);
    #####:  695:   return 0;
        -:  696:}
        -:  697:
        -:  698:
        -:  699:
        5:  700:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  701:{
        -:  702:  int i;
        -:  703:  int j;
        -:  704:  int k;
        -:  705:  int x;
        -:  706:  int index;
        5:  707:  int currentPlayer = whoseTurn(state);
        5:  708:  int nextPlayer = currentPlayer + 1;
        -:  709:
        5:  710:  int tributeRevealedCards[2] = {-1, -1};
        -:  711:  int temphand[MAX_HAND];// moved above the if statement
        5:  712:  int drawntreasure=0;
        -:  713:  int cardDrawn;
        5:  714:  int z = 0;// this is the counter for the temp hand
        5:  715:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  716:    nextPlayer = 0;
        -:  717:  }
        -:  718:
        -:  719:  	
        -:  720:  //uses switch to select card and perform actions
        5:  721:  switch( card ) {
        -:  722:     
        -:  723:    case smithy:
        1:  724:       return card_smithy(state, currentPlayer, handPos);
        -:  725:
        -:  726:    case village:
        1:  727:       return card_village(state, currentPlayer, handPos);
        -:  728:       
        -:  729:    case outpost:
    #####:  730:       return card_outpost(state, currentPlayer, handPos);
        -:  731:
        -:  732:    case salvager:
    #####:  733:       return card_salvager(state, currentPlayer, handPos, choice2);
        -:  734:
        -:  735:    case adventurer:
    #####:  736:      while(drawntreasure<2){
    #####:  737:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  738:	  shuffle(currentPlayer, state);
        -:  739:	}
    #####:  740:	drawCard(currentPlayer, state);
    #####:  741:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  742:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  743:	  drawntreasure++;
        -:  744:	else{
    #####:  745:	  temphand[z]=cardDrawn;
    #####:  746:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  747:	  z++;
        -:  748:	}
        -:  749:      }
    #####:  750:      while(z-1>=0){
    #####:  751:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  752:	z=z-1;
        -:  753:      }
    #####:  754:      return 0;
        -:  755:			
        -:  756:    case council_room:
        -:  757:      //+4 Cards
        5:  758:      for (i = 0; i < 4; i++)
        -:  759:	{
        4:  760:	  drawCard(currentPlayer, state);
        -:  761:	}
        -:  762:			
        -:  763:      //+1 Buy
        1:  764:      state->numBuys++;
        -:  765:			
        -:  766:      //Each other player draws a card
        3:  767:      for (i = 0; i < state->numPlayers; i++)
        -:  768:	{
        2:  769:	  if ( i != currentPlayer )
        -:  770:	    {
        1:  771:	      drawCard(i, state);
        -:  772:	    }
        -:  773:	}
        -:  774:			
        -:  775:      //put played card in played card pile
        1:  776:      discardCard(handPos, currentPlayer, state, 0);
        -:  777:			
        1:  778:      return 0;
        -:  779:			
        -:  780:    case feast:
        -:  781:      //gain card with cost up to 5
        -:  782:      //Backup hand
    #####:  783:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  784:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  785:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  786:      }
        -:  787:      //Backup hand
        -:  788:
        -:  789:      //Update Coins for Buy
    #####:  790:      updateCoins(currentPlayer, state, 5);
    #####:  791:      x = 1;//Condition to loop on
    #####:  792:      while( x == 1) {//Buy one card
    #####:  793:	if (supplyCount(choice1, state) <= 0){
        -:  794:	  if (DEBUG)
        -:  795:	    printf("None of that card left, sorry!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  799:	  }
        -:  800:	}
    #####:  801:	else if (state->coins < getCost(choice1)){
    #####:  802:	  printf("That card is too expensive!\n");
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  806:	  }
        -:  807:	}
        -:  808:	else{
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
    #####:  814:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  815:	  x = 0;//No more buying cards
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
        -:  821:	}
        -:  822:      }     
        -:  823:
        -:  824:      //Reset Hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  826:	state->hand[currentPlayer][i] = temphand[i];
    #####:  827:	temphand[i] = -1;
        -:  828:      }
        -:  829:      //Reset Hand
        -:  830:      			
    #####:  831:      return 0;
        -:  832:			
        -:  833:    case gardens:
    #####:  834:      return -1;
        -:  835:			
        -:  836:    case mine:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:		
    #####:  844:      if (choice2 > treasure_map || choice2 < curse)
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      gainCard(choice2, state, 2, currentPlayer);
        -:  855:
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
        -:  858:
        -:  859:      //discard trashed card
    #####:  860:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  861:	{
    #####:  862:	  if (state->hand[currentPlayer][i] == j)
        -:  863:	    {
    #####:  864:	      discardCard(i, currentPlayer, state, 0);			
    #####:  865:	      break;
        -:  866:	    }
        -:  867:	}
        -:  868:			
    #####:  869:      return 0;
        -:  870:			
        -:  871:    case remodel:
    #####:  872:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 0, currentPlayer);
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
    #####:  890:	      break;
        -:  891:	    }
        -:  892:	}
        -:  893:
        -:  894:
    #####:  895:      return 0;
        -:  896:				
        -:  897:    case baron:
    #####:  898:      state->numBuys++;//Increase buys by 1!
    #####:  899:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  900:	int p = 0;//Iterator for hand!
    #####:  901:	int card_not_discarded = 1;//Flag for discard set!
    #####:  902:	while(card_not_discarded){
    #####:  903:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  904:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  905:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  906:	    state->discardCount[currentPlayer]++;
    #####:  907:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  908:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  909:	    }
    #####:  910:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  911:	    state->handCount[currentPlayer]--;
    #####:  912:	    card_not_discarded = 0;//Exit the loop
        -:  913:	  }
    #####:  914:	  else if (p > state->handCount[currentPlayer]){
        -:  915:	    if(DEBUG) {
        -:  916:	      printf("No estate cards in your hand, invalid choice\n");
        -:  917:	      printf("Must gain an estate if there are any\n");
        -:  918:	    }
    #####:  919:	    if (supplyCount(estate, state) > 0){
    #####:  920:	      gainCard(estate, state, 0, currentPlayer);
    #####:  921:	      state->supplyCount[estate]--;//Decrement estates
    #####:  922:	      if (supplyCount(estate, state) == 0){
    #####:  923:		isGameOver(state);
        -:  924:	      }
        -:  925:	    }
    #####:  926:	    card_not_discarded = 0;//Exit the loop
        -:  927:	  }
        -:  928:			    
        -:  929:	  else{
    #####:  930:	    p++;//Next card
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:			    
        -:  935:      else{
    #####:  936:	if (supplyCount(estate, state) > 0){
    #####:  937:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  938:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  939:	  if (supplyCount(estate, state) == 0){
    #####:  940:	    isGameOver(state);
        -:  941:	  }
        -:  942:	}
        -:  943:      }
        -:  944:	    
        -:  945:      
    #####:  946:      return 0;
        -:  947:		
        -:  948:    case minion:
        -:  949:      //+1 action
        2:  950:      state->numActions++;
        -:  951:			
        -:  952:      //discard card from hand
        2:  953:      discardCard(handPos, currentPlayer, state, 0);
        -:  954:			
        2:  955:      if (choice1)		//+2 coins
        -:  956:	{
        1:  957:	  state->coins = state->coins + 2;
        -:  958:	}
        -:  959:			
        1:  960:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  961:	{
        -:  962:	  //discard hand
        6:  963:	  while(numHandCards(state) > 0)
        -:  964:	    {
        4:  965:	      discardCard(handPos, currentPlayer, state, 0);
        -:  966:	    }
        -:  967:				
        -:  968:	  //draw 4
        5:  969:	  for (i = 0; i < 4; i++)
        -:  970:	    {
        4:  971:	      drawCard(currentPlayer, state);
        -:  972:	    }
        -:  973:				
        -:  974:	  //other players discard hand and redraw if hand size > 4
        3:  975:	  for (i = 0; i < state->numPlayers; i++)
        -:  976:	    {
        2:  977:	      if (i != currentPlayer)
        -:  978:		{
        1:  979:		  if ( state->handCount[i] > 4 )
        -:  980:		    {
        -:  981:		      //discard hand
    #####:  982:		      while( state->handCount[i] > 0 )
        -:  983:			{
    #####:  984:			  discardCard(handPos, i, state, 0);
        -:  985:			}
        -:  986:							
        -:  987:		      //draw 4
    #####:  988:		      for (j = 0; j < 4; j++)
        -:  989:			{
    #####:  990:			  drawCard(i, state);
        -:  991:			}
        -:  992:		    }
        -:  993:		}
        -:  994:	    }
        -:  995:				
        -:  996:	}
        2:  997:      return 0;
        -:  998:		
        -:  999:    case steward:
    #####: 1000:      if (choice1 == 1)
        -: 1001:	{
        -: 1002:	  //+2 cards
    #####: 1003:	  drawCard(currentPlayer, state);
    #####: 1004:	  drawCard(currentPlayer, state);
        -: 1005:	}
    #####: 1006:      else if (choice1 == 2)
        -: 1007:	{
        -: 1008:	  //+2 coins
    #####: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:      else
        -: 1012:	{
        -: 1013:	  //trash 2 cards in hand
    #####: 1014:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1015:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1016:	}
        -: 1017:			
        -: 1018:      //discard card from hand
    #####: 1019:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1020:      return 0;
        -: 1021:		
        -: 1022:    case tribute:
    #####: 1023:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1024:	if (state->deckCount[nextPlayer] > 0){
    #####: 1025:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	  state->deckCount[nextPlayer]--;
        -: 1027:	}
    #####: 1028:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1029:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:	  state->discardCount[nextPlayer]--;
        -: 1031:	}
        -: 1032:	else{
        -: 1033:	  //No Card to Reveal
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("No cards to reveal\n");
        -: 1036:	  }
        -: 1037:	}
        -: 1038:      }
        -: 1039:	    
        -: 1040:      else{
    #####: 1041:	if (state->deckCount[nextPlayer] == 0){
    #####: 1042:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1043:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:	    state->deckCount[nextPlayer]++;
    #####: 1045:	    state->discard[nextPlayer][i] = -1;
    #####: 1046:	    state->discardCount[nextPlayer]--;
        -: 1047:	  }
        -: 1048:			    
    #####: 1049:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1050:	} 
    #####: 1051:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:	state->deckCount[nextPlayer]--;
    #####: 1054:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:      }    
        -: 1058:		       
    #####: 1059:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1060:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:	state->playedCardCount++;
    #####: 1062:	tributeRevealedCards[1] = -1;
        -: 1063:      }
        -: 1064:
    #####: 1065:      for (i = 0; i <= 2; i ++){
    #####: 1066:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1067:	  state->coins += 2;
        -: 1068:	}
        -: 1069:		    
    #####: 1070:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1071:	  drawCard(currentPlayer, state);
    #####: 1072:	  drawCard(currentPlayer, state);
        -: 1073:	}
        -: 1074:	else{//Action Card
    #####: 1075:	  state->numActions = state->numActions + 2;
        -: 1076:	}
        -: 1077:      }
        -: 1078:	    
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case ambassador:
    #####: 1082:      j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:      if (choice2 > 2 || choice2 < 0)
        -: 1085:	{
    #####: 1086:	  return -1;				
        -: 1087:	}
        -: 1088:
    #####: 1089:      if (choice1 == handPos)
        -: 1090:	{
    #####: 1091:	  return -1;
        -: 1092:	}
        -: 1093:
    #####: 1094:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	{
    #####: 1096:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1097:	    {
    #####: 1098:	      j++;
        -: 1099:	    }
        -: 1100:	}
    #####: 1101:      if (j < choice2)
        -: 1102:	{
    #####: 1103:	  return -1;				
        -: 1104:	}
        -: 1105:
        -: 1106:      if (DEBUG) 
        -: 1107:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:      //increase supply count for choosen card by amount being discarded
    #####: 1110:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:			
        -: 1112:      //each other player gains a copy of revealed card
    #####: 1113:      for (i = 0; i < state->numPlayers; i++)
        -: 1114:	{
    #####: 1115:	  if (i != currentPlayer)
        -: 1116:	    {
    #####: 1117:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1118:	    }
        -: 1119:	}
        -: 1120:
        -: 1121:      //discard played card from hand
    #####: 1122:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1123:
        -: 1124:      //trash copies of cards returned to supply
    #####: 1125:      for (j = 0; j < choice2; j++)
        -: 1126:	{
    #####: 1127:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	    {
    #####: 1129:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1130:		{
    #####: 1131:		  discardCard(i, currentPlayer, state, 1);
    #####: 1132:		  break;
        -: 1133:		}
        -: 1134:	    }
        -: 1135:	}			
        -: 1136:
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case cutpurse:
        -: 1140:
    #####: 1141:      updateCoins(currentPlayer, state, 2);
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
        -: 1145:	    {
    #####: 1146:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1147:		{
    #####: 1148:		  if (state->hand[i][j] == copper)
        -: 1149:		    {
    #####: 1150:		      discardCard(j, i, state, 0);
    #####: 1151:		      break;
        -: 1152:		    }
    #####: 1153:		  if (j == state->handCount[i])
        -: 1154:		    {
    #####: 1155:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1156:			{
        -: 1157:			  if (DEBUG)
        -: 1158:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1159:			}	
    #####: 1160:		      break;
        -: 1161:		    }		
        -: 1162:		}
        -: 1163:					
        -: 1164:	    }
        -: 1165:				
        -: 1166:	}				
        -: 1167:
        -: 1168:      //discard played card from hand
    #####: 1169:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1170:
    #####: 1171:      return 0;
        -: 1172:
        -: 1173:		
        -: 1174:    case embargo: 
        -: 1175:      //+2 Coins
    #####: 1176:      state->coins = state->coins + 2;
        -: 1177:			
        -: 1178:      //see if selected pile is in play
    #####: 1179:      if ( state->supplyCount[choice1] == -1 )
        -: 1180:	{
    #####: 1181:	  return -1;
        -: 1182:	}
        -: 1183:			
        -: 1184:      //add embargo token to selected supply pile
    #####: 1185:      state->embargoTokens[choice1]++;
        -: 1186:			
        -: 1187:      //trash card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:		
        -: 1192:    case sea_hag:
    #####: 1193:      for (i = 0; i < state->numPlayers; i++){
    #####: 1194:	if (i != currentPlayer){
    #####: 1195:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1196:	  state->discardCount[i]++;
    #####: 1197:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1198:	}
        -: 1199:      }
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case treasure_map:
        -: 1203:      //search hand for another treasure_map
    #####: 1204:      index = -1;
    #####: 1205:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1206:	{
    #####: 1207:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1208:	    {
    #####: 1209:	      index = i;
    #####: 1210:	      break;
        -: 1211:	    }
        -: 1212:	}
    #####: 1213:      if (index > -1)
        -: 1214:	{
        -: 1215:	  //trash both treasure cards
    #####: 1216:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:	  discardCard(index, currentPlayer, state, 1);
        -: 1218:
        -: 1219:	  //gain 4 Gold cards
    #####: 1220:	  for (i = 0; i < 4; i++)
        -: 1221:	    {
    #####: 1222:	      gainCard(gold, state, 1, currentPlayer);
        -: 1223:	    }
        -: 1224:				
        -: 1225:	  //return success
    #####: 1226:	  return 1;
        -: 1227:	}
        -: 1228:			
        -: 1229:      //no second treasure_map found in hand
    #####: 1230:      return -1;
        -: 1231:    }
        -: 1232:	
    #####: 1233:  return -1;
        -: 1234:}
        -: 1235:
       19: 1236:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1237:{
        -: 1238:	
        -: 1239:  //if card is not trashed, added to Played pile 
       19: 1240:  if (trashFlag < 1)
        -: 1241:    {
        -: 1242:      //add card to played pile
       19: 1243:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       19: 1244:      state->playedCardCount++;
        -: 1245:    }
        -: 1246:	
        -: 1247:  //set played card to -1
       19: 1248:  state->hand[currentPlayer][handPos] = -1;
        -: 1249:	
        -: 1250:  //remove card from player's hand
       19: 1251:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1252:    {
        -: 1253:      //reduce number of cards in hand
        1: 1254:      state->handCount[currentPlayer]--;
        -: 1255:    }
       18: 1256:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
        -: 1261:  else 	
        -: 1262:    {
        -: 1263:      //replace discarded card with last card in hand
       18: 1264:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1265:      //set last card to -1
       18: 1266:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1267:      //reduce number of cards in hand
       18: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:	
       19: 1271:  return 0;
        -: 1272:}
        -: 1273:
    #####: 1274:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1275:{
        -: 1276:  //Note: supplyPos is enum of choosen card
        -: 1277:	
        -: 1278:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1279:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1280:    {
    #####: 1281:      return -1;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //added card for [whoseTurn] current player:
        -: 1285:  // toFlag = 0 : add to discard
        -: 1286:  // toFlag = 1 : add to deck
        -: 1287:  // toFlag = 2 : add to hand
        -: 1288:
    #####: 1289:  if (toFlag == 1)
        -: 1290:    {
    #####: 1291:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1292:      state->deckCount[player]++;
        -: 1293:    }
    #####: 1294:  else if (toFlag == 2)
        -: 1295:    {
    #####: 1296:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1297:      state->handCount[player]++;
        -: 1298:    }
        -: 1299:  else
        -: 1300:    {
    #####: 1301:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1302:      state->discardCount[player]++;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //decrease number in supply pile
    #####: 1306:  state->supplyCount[supplyPos]--;
        -: 1307:	 
    #####: 1308:  return 0;
        -: 1309:}
        -: 1310:
       15: 1311:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1312:{
        -: 1313:  int i;
        -: 1314:	
        -: 1315:  //reset coin count
       15: 1316:  state->coins = 0;
        -: 1317:
        -: 1318:  //add coins for each Treasure card in player's hand
       90: 1319:  for (i = 0; i < state->handCount[player]; i++)
        -: 1320:    {
       75: 1321:      if (state->hand[player][i] == copper)
        -: 1322:	{
       50: 1323:	  state->coins += 1;
        -: 1324:	}
       25: 1325:      else if (state->hand[player][i] == silver)
        -: 1326:	{
    #####: 1327:	  state->coins += 2;
        -: 1328:	}
       25: 1329:      else if (state->hand[player][i] == gold)
        -: 1330:	{
    #####: 1331:	  state->coins += 3;
        -: 1332:	}	
        -: 1333:    }	
        -: 1334:
        -: 1335:  //add bonus
       15: 1336:  state->coins += bonus;
        -: 1337:
       15: 1338:  return 0;
        -: 1339:}
        -: 1340:
        -: 1341:
        -: 1342://end of dominion.c
        -: 1343:
